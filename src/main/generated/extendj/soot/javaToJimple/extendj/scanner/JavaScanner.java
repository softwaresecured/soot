/* The following code was generated by JFlex 1.6.1 */

package soot.javaToJimple.extendj.scanner;

import beaver.Symbol;
import beaver.Scanner;
import soot.javaToJimple.extendj.parser.JavaParser.Terminals;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/olivier/projects/extendj/src/tmp/scanner/JavaScanner.flex</tt>
 */
public final class JavaScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\104\1\3\1\1\1\54\1\4\1\2\14\104\1\105\1\104\4\0"+
    "\1\3\1\71\1\20\1\0\1\103\1\101\1\75\1\17\1\56\1\57"+
    "\1\6\1\77\1\65\1\14\1\12\1\5\4\23\4\22\2\11\1\74"+
    "\1\64\1\70\1\66\1\67\1\73\1\102\3\7\1\16\1\15\1\16"+
    "\5\103\1\7\3\103\1\13\7\103\1\7\2\103\1\62\1\21\1\63"+
    "\1\100\1\10\1\0\1\24\1\31\1\32\1\43\1\26\1\44\1\46"+
    "\1\40\1\41\1\103\1\36\1\34\1\47\1\35\1\33\1\50\1\103"+
    "\1\27\1\25\1\30\1\42\1\51\1\52\1\45\1\37\1\53\1\60"+
    "\1\76\1\61\1\72\6\104\1\55\32\104\2\0\4\103\4\0\1\103"+
    "\2\0\1\104\7\0\1\103\4\0\1\103\5\0\27\103\1\0\37\103"+
    "\1\0\u01ca\103\4\0\14\103\16\0\5\103\7\0\1\103\1\0\1\103"+
    "\21\0\160\104\5\103\1\0\2\103\2\0\4\103\10\0\1\103\1\0"+
    "\3\103\1\0\1\103\1\0\24\103\1\0\123\103\1\0\213\103\1\0"+
    "\5\104\2\0\236\103\11\0\46\103\2\0\1\103\7\0\47\103\7\0"+
    "\1\103\1\0\55\104\1\0\1\104\1\0\2\104\1\0\2\104\1\0"+
    "\1\104\10\0\33\103\5\0\3\103\15\0\5\104\6\0\1\103\4\0"+
    "\13\104\5\0\53\103\37\104\4\0\2\103\1\104\143\103\1\0\1\103"+
    "\10\104\1\0\6\104\2\103\2\104\1\0\4\104\2\103\12\104\3\103"+
    "\2\0\1\103\17\0\1\104\1\103\1\104\36\103\33\104\2\0\131\103"+
    "\13\104\1\103\16\0\12\104\41\103\11\104\2\103\4\0\1\103\5\0"+
    "\26\103\4\104\1\103\11\104\1\103\3\104\1\103\5\104\22\0\31\103"+
    "\3\104\104\0\1\103\1\0\13\103\67\0\33\104\1\0\4\104\66\103"+
    "\3\104\1\103\22\104\1\103\7\104\12\103\2\104\2\0\12\104\1\0"+
    "\7\103\1\0\7\103\1\0\3\104\1\0\10\103\2\0\2\103\2\0"+
    "\26\103\1\0\7\103\1\0\1\103\3\0\4\103\2\0\1\104\1\103"+
    "\7\104\2\0\2\104\2\0\3\104\1\103\10\0\1\104\4\0\2\103"+
    "\1\0\3\103\2\104\2\0\12\104\4\103\7\0\1\103\5\0\3\104"+
    "\1\0\6\103\4\0\2\103\2\0\26\103\1\0\7\103\1\0\2\103"+
    "\1\0\2\103\1\0\2\103\2\0\1\104\1\0\5\104\4\0\2\104"+
    "\2\0\3\104\3\0\1\104\7\0\4\103\1\0\1\103\7\0\14\104"+
    "\3\103\1\104\13\0\3\104\1\0\11\103\1\0\3\103\1\0\26\103"+
    "\1\0\7\103\1\0\2\103\1\0\5\103\2\0\1\104\1\103\10\104"+
    "\1\0\3\104\1\0\3\104\2\0\1\103\17\0\2\103\2\104\2\0"+
    "\12\104\1\0\1\103\17\0\3\104\1\0\10\103\2\0\2\103\2\0"+
    "\26\103\1\0\7\103\1\0\2\103\1\0\5\103\2\0\1\104\1\103"+
    "\7\104\2\0\2\104\2\0\3\104\10\0\2\104\4\0\2\103\1\0"+
    "\3\103\2\104\2\0\12\104\1\0\1\103\20\0\1\104\1\103\1\0"+
    "\6\103\3\0\3\103\1\0\4\103\3\0\2\103\1\0\1\103\1\0"+
    "\2\103\3\0\2\103\3\0\3\103\3\0\14\103\4\0\5\104\3\0"+
    "\3\104\1\0\4\104\2\0\1\103\6\0\1\104\16\0\12\104\11\0"+
    "\1\103\7\0\3\104\1\0\10\103\1\0\3\103\1\0\27\103\1\0"+
    "\12\103\1\0\5\103\3\0\1\103\7\104\1\0\3\104\1\0\4\104"+
    "\7\0\2\104\1\0\2\103\6\0\2\103\2\104\2\0\12\104\22\0"+
    "\2\104\1\0\10\103\1\0\3\103\1\0\27\103\1\0\12\103\1\0"+
    "\5\103\2\0\1\104\1\103\7\104\1\0\3\104\1\0\4\104\7\0"+
    "\2\104\7\0\1\103\1\0\2\103\2\104\2\0\12\104\1\0\2\103"+
    "\17\0\2\104\1\0\10\103\1\0\3\103\1\0\51\103\2\0\1\103"+
    "\7\104\1\0\3\104\1\0\4\104\1\103\10\0\1\104\10\0\2\103"+
    "\2\104\2\0\12\104\12\0\6\103\2\0\2\104\1\0\22\103\3\0"+
    "\30\103\1\0\11\103\1\0\1\103\2\0\7\103\3\0\1\104\4\0"+
    "\6\104\1\0\1\104\1\0\10\104\22\0\2\104\15\0\60\103\1\104"+
    "\2\103\7\104\4\0\10\103\10\104\1\0\12\104\47\0\2\103\1\0"+
    "\1\103\2\0\2\103\1\0\1\103\2\0\1\103\6\0\4\103\1\0"+
    "\7\103\1\0\3\103\1\0\1\103\1\0\1\103\2\0\2\103\1\0"+
    "\4\103\1\104\2\103\6\104\1\0\2\104\1\103\2\0\5\103\1\0"+
    "\1\103\1\0\6\104\2\0\12\104\2\0\4\103\40\0\1\103\27\0"+
    "\2\104\6\0\12\104\13\0\1\104\1\0\1\104\1\0\1\104\4\0"+
    "\2\104\10\103\1\0\44\103\4\0\24\104\1\0\2\104\5\103\13\104"+
    "\1\0\44\104\11\0\1\104\71\0\53\103\24\104\1\103\12\104\6\0"+
    "\6\103\4\104\4\103\3\104\1\103\3\104\2\103\7\104\3\103\4\104"+
    "\15\103\14\104\1\103\17\104\2\0\46\103\1\0\1\103\5\0\1\103"+
    "\2\0\53\103\1\0\u014d\103\1\0\4\103\2\0\7\103\1\0\1\103"+
    "\1\0\4\103\2\0\51\103\1\0\4\103\2\0\41\103\1\0\4\103"+
    "\2\0\7\103\1\0\1\103\1\0\4\103\2\0\17\103\1\0\71\103"+
    "\1\0\4\103\2\0\103\103\2\0\3\104\40\0\20\103\20\0\125\103"+
    "\14\0\u026c\103\2\0\21\103\1\0\32\103\5\0\113\103\3\0\3\103"+
    "\17\0\15\103\1\0\4\103\3\104\13\0\22\103\3\104\13\0\22\103"+
    "\2\104\14\0\15\103\1\0\3\103\1\0\2\104\14\0\64\103\40\104"+
    "\3\0\1\103\3\0\2\103\1\104\2\0\12\104\41\0\3\104\2\0"+
    "\12\104\6\0\130\103\10\0\51\103\1\104\1\103\5\0\106\103\12\0"+
    "\35\103\3\0\14\104\4\0\14\104\12\0\12\104\36\103\2\0\5\103"+
    "\13\0\54\103\4\0\21\104\7\103\2\104\6\0\12\104\46\0\27\103"+
    "\5\104\4\0\65\103\12\104\1\0\35\104\2\0\13\104\6\0\12\104"+
    "\15\0\1\103\130\0\5\104\57\103\21\104\7\103\4\0\12\104\21\0"+
    "\11\104\14\0\3\104\36\103\15\104\2\103\12\104\54\103\16\104\14\0"+
    "\44\103\24\104\10\0\12\104\3\0\3\103\12\104\44\103\122\0\3\104"+
    "\1\0\25\104\4\103\1\104\4\103\3\104\2\103\11\0\300\103\47\104"+
    "\25\0\4\104\u0116\103\2\0\6\103\2\0\46\103\2\0\6\103\2\0"+
    "\10\103\1\0\1\103\1\0\1\103\1\0\1\103\1\0\37\103\2\0"+
    "\65\103\1\0\7\103\1\0\1\103\3\0\3\103\1\0\7\103\3\0"+
    "\4\103\2\0\6\103\4\0\15\103\5\0\3\103\1\0\7\103\16\0"+
    "\5\104\30\0\1\54\1\54\5\104\20\0\2\103\23\0\1\103\13\0"+
    "\5\104\5\0\6\104\1\0\1\103\15\0\1\103\20\0\15\103\3\0"+
    "\33\103\25\0\15\104\4\0\1\104\3\0\14\104\21\0\1\103\4\0"+
    "\1\103\2\0\12\103\1\0\1\103\3\0\5\103\6\0\1\103\1\0"+
    "\1\103\1\0\1\103\1\0\4\103\1\0\13\103\2\0\4\103\5\0"+
    "\5\103\4\0\1\103\21\0\51\103\u0a77\0\57\103\1\0\57\103\1\0"+
    "\205\103\6\0\4\103\3\104\2\103\14\0\46\103\1\0\1\103\5\0"+
    "\1\103\2\0\70\103\7\0\1\103\17\0\1\104\27\103\11\0\7\103"+
    "\1\0\7\103\1\0\7\103\1\0\7\103\1\0\7\103\1\0\7\103"+
    "\1\0\7\103\1\0\7\103\1\0\40\104\57\0\1\103\u01d5\0\3\103"+
    "\31\0\11\103\6\104\1\0\5\103\2\0\5\103\4\0\126\103\2\0"+
    "\2\104\2\0\3\103\1\0\132\103\1\0\4\103\5\0\51\103\3\0"+
    "\136\103\21\0\33\103\65\0\20\103\u0200\0\u19b6\103\112\0\u51cd\103\63\0"+
    "\u048d\103\103\0\56\103\2\0\u010d\103\3\0\20\103\12\104\2\103\24\0"+
    "\57\103\1\104\4\0\12\104\1\0\31\103\7\0\1\104\120\103\2\104"+
    "\45\0\11\103\2\0\147\103\2\0\4\103\1\0\4\103\14\0\13\103"+
    "\115\0\12\103\1\104\3\103\1\104\4\103\1\104\27\103\5\104\20\0"+
    "\1\103\7\0\64\103\14\0\2\104\62\103\21\104\13\0\12\104\6\0"+
    "\22\104\6\103\3\0\1\103\4\0\12\104\34\103\10\104\2\0\27\103"+
    "\15\104\14\0\35\103\3\0\4\104\57\103\16\104\16\0\1\103\12\104"+
    "\46\0\51\103\16\104\11\0\3\103\1\104\10\103\2\104\2\0\12\104"+
    "\6\0\27\103\3\0\1\103\1\104\4\0\60\103\1\104\1\103\3\104"+
    "\2\103\2\104\5\103\2\104\1\103\1\104\1\103\30\0\3\103\2\0"+
    "\13\103\5\104\2\0\3\103\2\104\12\0\6\103\2\0\6\103\2\0"+
    "\6\103\11\0\7\103\1\0\7\103\221\0\43\103\10\104\1\0\2\104"+
    "\2\0\12\104\6\0\u2ba4\103\14\0\27\103\4\0\61\103\4\0\u0800\103"+
    "\u1900\0\u016e\103\2\0\152\103\46\0\7\103\14\0\5\103\5\0\1\103"+
    "\1\104\12\103\1\0\15\103\1\0\5\103\1\0\1\103\1\0\2\103"+
    "\1\0\2\103\1\0\154\103\41\0\u016b\103\22\0\100\103\2\0\66\103"+
    "\50\0\15\103\3\0\20\104\20\0\7\104\14\0\2\103\30\0\3\103"+
    "\31\0\1\103\6\0\5\103\1\0\207\103\2\0\1\104\4\0\1\103"+
    "\13\0\12\104\7\0\32\103\4\0\1\103\1\0\32\103\13\0\131\103"+
    "\3\0\6\103\2\0\6\103\2\0\6\103\2\0\3\103\3\0\2\103"+
    "\3\0\2\103\22\0\3\104\4\0\14\103\1\0\32\103\1\0\23\103"+
    "\1\0\2\103\1\0\17\103\2\0\16\103\42\0\173\103\105\0\65\103"+
    "\210\0\1\104\202\0\35\103\3\0\61\103\57\0\37\103\21\0\33\103"+
    "\65\0\36\103\2\0\44\103\4\0\10\103\1\0\5\103\52\0\236\103"+
    "\2\0\12\104\u0356\0\6\103\2\0\1\103\1\0\54\103\1\0\2\103"+
    "\3\0\1\103\2\0\27\103\252\0\26\103\12\0\32\103\106\0\70\103"+
    "\6\0\2\103\100\0\1\103\3\104\1\0\2\104\5\0\4\104\4\103"+
    "\1\0\3\103\1\0\33\103\4\0\3\104\4\0\1\104\40\0\35\103"+
    "\203\0\66\103\12\0\26\103\12\0\23\103\215\0\111\103\u03b7\0\3\104"+
    "\65\103\17\104\37\0\12\104\20\0\3\104\55\103\13\104\2\0\1\104"+
    "\22\0\31\103\7\0\12\104\6\0\3\104\44\103\16\104\1\0\12\104"+
    "\100\0\3\104\60\103\16\104\4\103\13\0\12\104\u04a6\0\53\103\15\104"+
    "\10\0\12\104\u0936\0\u036f\103\221\0\143\103\u0b9d\0\u042f\103\u33d1\0\u0239\103"+
    "\u04c7\0\105\103\13\0\1\103\56\104\20\0\4\104\15\103\u4060\0\2\103"+
    "\u2163\0\5\104\3\0\26\104\2\0\7\104\36\0\4\104\224\0\3\104"+
    "\u01bb\0\125\103\1\0\107\103\1\0\2\103\2\0\1\103\2\0\2\103"+
    "\2\0\4\103\1\0\14\103\1\0\1\103\1\0\7\103\1\0\101\103"+
    "\1\0\4\103\2\0\10\103\1\0\7\103\1\0\34\103\1\0\4\103"+
    "\1\0\5\103\1\0\1\103\3\0\7\103\1\0\u0154\103\2\0\31\103"+
    "\1\0\31\103\1\0\37\103\1\0\31\103\1\0\37\103\1\0\31\103"+
    "\1\0\37\103\1\0\31\103\1\0\37\103\1\0\31\103\1\0\10\103"+
    "\2\0\62\104\u1600\0\4\103\1\0\33\103\1\0\2\103\1\0\1\103"+
    "\2\0\1\103\1\0\12\103\1\0\4\103\1\0\1\103\1\0\1\103"+
    "\6\0\1\103\4\0\1\103\1\0\1\103\1\0\1\103\1\0\3\103"+
    "\1\0\2\103\1\0\1\103\2\0\1\103\1\0\1\103\1\0\1\103"+
    "\1\0\1\103\1\0\1\103\1\0\2\103\1\0\1\103\2\0\4\103"+
    "\1\0\7\103\1\0\4\103\1\0\4\103\1\0\1\103\1\0\12\103"+
    "\1\0\21\103\5\0\3\103\1\0\5\103\1\0\21\103\u1144\0\ua6d7\103"+
    "\51\0\u1035\103\13\0\336\103\u3fe2\0\u021e\103\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\104\36\0\140\104\200\0\360\104\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\20\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\2\41\1\42\1\1\1\2\1\0"+
    "\1\43\1\44\2\6\1\0\1\6\1\0\1\45\1\46"+
    "\1\47\1\0\2\50\1\0\31\5\1\51\2\5\1\52"+
    "\12\5\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\2\76\1\77\1\100\1\101"+
    "\1\102\1\103\2\0\2\6\1\0\1\104\1\105\12\72"+
    "\15\5\1\106\15\5\1\107\2\5\1\110\4\5\1\111"+
    "\12\5\1\112\1\113\1\114\1\76\2\0\1\6\1\115"+
    "\1\116\1\117\1\120\2\0\1\121\1\122\1\123\1\124"+
    "\1\125\10\5\1\126\1\127\3\5\1\130\1\5\1\131"+
    "\2\5\1\132\1\133\4\5\1\134\1\135\1\5\1\136"+
    "\10\5\1\137\5\5\1\140\1\5\1\141\1\0\5\5"+
    "\1\142\1\143\4\5\1\144\1\145\1\5\1\146\1\5"+
    "\1\147\7\5\1\150\1\151\5\5\1\152\1\153\1\154"+
    "\1\5\1\155\2\5\1\156\1\5\1\157\1\5\1\160"+
    "\2\5\1\161\2\5\1\162\2\5\1\163\4\5\1\164"+
    "\4\5\1\165\1\5\1\166\4\5\1\167\1\170\1\171"+
    "\1\5\1\172\1\5\1\173\1\174\2\5\1\175\4\5"+
    "\1\176\1\5\1\177\1\5\1\200\1\5\1\201\1\5"+
    "\1\202\1\203\1\5\1\204";

  private static int [] zzUnpackAction() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\214\0\322\0\u0118\0\u015e\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\u02bc\0\214\0\u0302\0\u0348\0\u038e"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\214\0\214\0\214"+
    "\0\214\0\214\0\214\0\214\0\214\0\u0762\0\u07a8\0\u07ee"+
    "\0\u0834\0\214\0\214\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992"+
    "\0\u09d8\0\214\0\214\0\u0a1e\0\214\0\u0a64\0\214\0\u0aaa"+
    "\0\u0af0\0\u0b36\0\214\0\214\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e"+
    "\0\u0c94\0\214\0\214\0\214\0\u0cda\0\214\0\u0d20\0\u0d66"+
    "\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96"+
    "\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6"+
    "\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6"+
    "\0\u143c\0\u01a4\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0"+
    "\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\214"+
    "\0\214\0\u1810\0\214\0\u1856\0\214\0\214\0\214\0\214"+
    "\0\214\0\214\0\214\0\214\0\214\0\214\0\214\0\214"+
    "\0\214\0\214\0\u189c\0\u18e2\0\214\0\214\0\214\0\214"+
    "\0\214\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\214\0\214"+
    "\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0"+
    "\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u01a4"+
    "\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba"+
    "\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u01a4\0\u245e\0\u24a4"+
    "\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u01a4\0\u2648\0\u268e"+
    "\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be"+
    "\0\214\0\u2904\0\214\0\214\0\u294a\0\u2990\0\214\0\214"+
    "\0\214\0\214\0\214\0\u29d6\0\u1b58\0\214\0\214\0\214"+
    "\0\214\0\214\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a"+
    "\0\u2bc0\0\u2c06\0\u01a4\0\u01a4\0\u2c4c\0\u2c92\0\u2cd8\0\u01a4"+
    "\0\u2d1e\0\u01a4\0\u2d64\0\u2daa\0\u01a4\0\u01a4\0\u2df0\0\u2e36"+
    "\0\u2e7c\0\u2ec2\0\u01a4\0\u01a4\0\u2f08\0\u01a4\0\u2f4e\0\u2f94"+
    "\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u01a4\0\u317e"+
    "\0\u31c4\0\u320a\0\u3250\0\u3296\0\u01a4\0\u32dc\0\214\0\u3322"+
    "\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u01a4\0\u01a4\0\u34c6"+
    "\0\u350c\0\u3552\0\u3598\0\u35de\0\u01a4\0\u3624\0\u01a4\0\u366a"+
    "\0\u01a4\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854"+
    "\0\u01a4\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u01a4"+
    "\0\214\0\u01a4\0\u3a3e\0\u01a4\0\u3a84\0\u3aca\0\u01a4\0\u3b10"+
    "\0\u01a4\0\u3b56\0\u01a4\0\u3b9c\0\u3be2\0\u01a4\0\u3c28\0\u3c6e"+
    "\0\u01a4\0\u3cb4\0\u3cfa\0\u01a4\0\u3d40\0\u3d86\0\u3dcc\0\u3e12"+
    "\0\u01a4\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u01a4\0\u3f70\0\u01a4"+
    "\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u01a4\0\u01a4\0\u01a4\0\u40ce"+
    "\0\u01a4\0\u4114\0\u01a4\0\u01a4\0\u415a\0\u41a0\0\u01a4\0\u41e6"+
    "\0\u422c\0\u4272\0\u42b8\0\u01a4\0\u42fe\0\u01a4\0\u4344\0\u01a4"+
    "\0\u438a\0\u01a4\0\u43d0\0\u01a4\0\u01a4\0\u4416\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\4\1\6\1\7\2\10\1\11"+
    "\1\12\1\10\1\13\2\10\1\14\1\15\1\3\2\11"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\10"+
    "\1\25\1\26\3\10\1\27\1\10\1\30\1\31\1\10"+
    "\1\32\1\10\1\33\1\34\1\35\1\10\2\3\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\10\1\3\1\63\1\64"+
    "\1\65\1\66\15\64\1\67\1\70\64\64\107\0\1\4"+
    "\111\0\1\71\1\72\57\0\1\73\105\0\1\74\26\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\32\10\1\0"+
    "\1\10\25\0\3\10\7\0\1\75\2\11\1\76\1\77"+
    "\1\0\1\100\1\75\3\0\2\11\1\75\1\0\1\100"+
    "\2\0\2\75\1\0\1\75\6\0\3\75\2\0\1\77"+
    "\46\0\1\76\1\101\7\0\2\76\76\0\1\102\51\0"+
    "\1\103\1\104\16\0\1\105\1\106\1\107\14\105\1\0"+
    "\1\105\1\110\64\105\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\3\10\1\111\3\10\1\112\22\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\6\10\1\113\6\10\1\114\1\115\1\10"+
    "\1\116\7\10\1\117\1\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\12\10"+
    "\1\120\1\121\7\10\1\122\6\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\4\10\1\123\25\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\5\10\1\124"+
    "\10\10\1\125\13\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\5\10\1\126"+
    "\3\10\1\127\3\10\1\130\14\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\2\10\1\131\6\10\1\132\1\133\3\10\1\134\13\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\11\10\1\135\20\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\2\10\1\136\1\10\1\137\13\10\1\140\11\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\13\10\1\141\6\10\1\142\2\10"+
    "\1\143\4\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\4\10\1\144\4\10"+
    "\1\145\20\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\2\10\1\146\6\10"+
    "\1\147\1\150\4\10\1\151\12\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\11\10\1\152\20\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\2\10\1\153"+
    "\2\10\1\154\12\10\1\155\11\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\11\10\1\156\20\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\16\10\1\157"+
    "\13\10\1\0\1\10\25\0\3\10\66\0\1\160\105\0"+
    "\1\161\1\162\104\0\1\163\1\0\1\164\103\0\1\165"+
    "\113\0\1\166\77\0\1\167\6\0\1\170\76\0\1\171"+
    "\7\0\1\172\75\0\1\173\10\0\1\174\74\0\1\175"+
    "\105\0\1\176\17\0\1\64\2\0\15\64\2\0\64\64"+
    "\1\0\1\65\104\0\1\177\2\0\1\177\1\0\12\177"+
    "\1\200\1\201\1\202\1\203\1\204\3\177\1\205\1\206"+
    "\1\207\3\177\1\210\6\177\1\211\7\177\2\0\30\177"+
    "\1\71\1\4\1\5\103\71\6\212\1\213\77\212\7\0"+
    "\3\75\1\76\1\77\1\0\2\75\3\0\3\75\1\0"+
    "\1\75\2\0\2\75\1\0\1\75\6\0\3\75\2\0"+
    "\1\77\44\0\3\76\1\0\1\77\1\0\1\214\1\76"+
    "\3\0\3\76\1\0\1\214\2\0\2\76\1\0\1\76"+
    "\6\0\3\76\2\0\1\77\45\0\2\215\2\0\1\216"+
    "\5\0\2\215\53\0\1\216\15\0\3\75\1\76\1\77"+
    "\1\216\2\75\3\0\3\75\1\0\1\75\2\0\2\75"+
    "\1\0\1\75\6\0\3\75\2\0\1\77\26\0\1\216"+
    "\20\0\1\217\112\0\1\220\67\0\1\106\104\0\1\177"+
    "\2\0\1\177\1\0\12\177\1\221\1\222\1\223\1\224"+
    "\1\225\3\177\1\226\1\227\1\230\3\177\1\231\6\177"+
    "\1\232\7\177\2\0\30\177\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\3\10\1\233\26\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\3\10\1\234\26\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\2\10"+
    "\1\235\2\10\1\236\24\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\13\10"+
    "\1\237\16\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\11\10\1\240\20\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\26\10\1\241\3\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\17\10\1\242\12\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\3\10"+
    "\1\243\26\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\20\10\1\244\11\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\6\10\1\245\23\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\6\10\1\246\23\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\2\10"+
    "\1\247\12\10\1\250\2\10\1\251\11\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\5\10\1\252\11\10\1\253\12\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\4\10\1\254\25\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\11\10"+
    "\1\255\20\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\6\10\1\256\23\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\3\10\1\257\2\10\1\260\23\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\13\10\1\261\16\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\2\10\1\262\27\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\2\10"+
    "\1\263\27\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\13\10\1\264\16\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\6\10\1\265\23\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\30\10\1\266\1\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\12\10"+
    "\1\267\17\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\3\10\1\270\2\10"+
    "\1\271\23\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\26\10\1\272\3\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\22\10\1\273\7\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\20\10\1\274\11\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\12\10"+
    "\1\275\17\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\5\10\1\276\24\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\11\10\1\277\20\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\13\10\1\300\16\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\6\10"+
    "\1\301\23\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\10\10\1\302\21\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\11\10\1\303\5\10\1\304\12\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\7\10\1\305\22\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\12\10\1\306\4\10\1\307\12\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\17\10\1\310\12\10\1\0\1\10\25\0\3\10"+
    "\66\0\1\311\1\312\104\0\1\313\41\0\2\314\104\0"+
    "\2\203\62\0\6\212\1\315\77\212\5\316\1\4\1\213"+
    "\77\316\7\0\3\76\1\0\1\77\1\216\1\214\1\76"+
    "\3\0\3\76\1\0\1\214\2\0\2\76\1\0\1\76"+
    "\6\0\3\76\2\0\1\77\26\0\1\216\16\0\2\215"+
    "\4\0\1\317\3\0\2\215\17\0\2\317\52\0\1\215"+
    "\10\0\2\215\101\0\1\320\105\0\1\321\105\0\1\322"+
    "\105\0\1\323\2\0\2\324\101\0\1\323\2\0\2\325"+
    "\101\0\1\326\105\0\1\327\105\0\1\330\105\0\1\331"+
    "\105\0\1\332\75\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\4\10\1\333\25\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\6\10"+
    "\1\334\23\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\6\10\1\335\23\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\17\10\1\336\12\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\10\10\1\337\21\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\5\10"+
    "\1\340\24\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\4\10\1\341\25\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\6\10\1\342\23\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\4\10\1\343\25\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\25\10"+
    "\1\344\4\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\4\10\1\345\25\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\20\10\1\346\11\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\13\10\1\347\16\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\4\10"+
    "\1\350\25\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\11\10\1\351\20\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\3\10\1\352\26\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\2\10\1\353\27\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\12\10"+
    "\1\354\17\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\4\10\1\355\25\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\4\10\1\356\25\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\10\10\1\357\21\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\3\10"+
    "\1\360\2\10\1\361\23\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\3\10"+
    "\1\362\26\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\5\10\1\363\24\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\24\10\1\364\5\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\17\10\1\365\12\10\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\12\10"+
    "\1\366\17\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\6\10\1\367\23\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\4\10\1\370\25\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\11\10\1\371\1\372\17\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\2\10\1\373\27\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\7\10\1\374"+
    "\22\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\3\10\1\251\26\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\2\10\1\375\27\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\2\10\1\376\27\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\11\10\1\377"+
    "\20\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\14\10\1\u0100\15\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\6\10\1\u0101\23\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\27\10\1\u0102\2\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\12\10\1\u0103"+
    "\17\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\2\10\1\u0104\27\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\21\10\1\u0105\10\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\12\10\1\u0106\17\10\1\0\1\10\25\0\3\10\66\0"+
    "\1\u0107\17\0\5\212\1\4\1\315\77\212\6\316\1\u0108"+
    "\77\316\17\0\1\323\75\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\5\10\1\u0109\24\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\5\10\1\u010a\24\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\17\10\1\u010b"+
    "\12\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\10\10\1\u010c\21\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\16\10\1\u010d\13\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\6\10\1\u010e\23\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\5\10\1\u010f"+
    "\24\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\10\10\1\u0110\21\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\13\10\1\u0111\16\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\5\10\1\u0112\24\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\3\10\1\u0113"+
    "\26\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\30\10\1\u0114\1\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\14\10\1\u0115\15\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\4\10\1\u0116\25\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\16\10\1\u0117"+
    "\13\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\6\10\1\377\23\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\17\10\1\u0118\12\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\3\10\1\u0119\26\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\27\10\1\u011a"+
    "\2\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\2\10\1\u011b\27\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\5\10\1\u011c\24\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\5\10\1\u011d\24\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\4\10\1\u011e"+
    "\25\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\20\10\1\u011f\11\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\12\10\1\u0120\17\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\6\10\1\u0121\23\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\12\10\1\u0122"+
    "\17\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\2\10\1\u0123\27\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\4\10\1\u0124\25\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\2\10\1\u0125\27\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\17\10\1\u0126"+
    "\12\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\6\10\1\u0127\23\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\4\10\1\u0128\25\10\1\0\1\10\25\0"+
    "\3\10\5\316\1\u0129\1\u0108\77\316\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\6\10\1\u012a\23\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\2\10\1\u012b\27\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\10\10\1\u012c\21\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\6\10\1\u012d"+
    "\23\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\5\10\1\u012e\24\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\16\10\1\u012f\13\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\21\10\1\u0130\10\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\13\10\1\u0131"+
    "\16\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\17\10\1\u0132\12\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\3\10\1\u0133\26\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\2\10\1\u0134\27\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\13\10\1\u0135"+
    "\16\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\4\10\1\u0136\25\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\13\10\1\u0137\16\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\22\10\1\u0138\7\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\6\10\1\u0139"+
    "\23\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\25\10\1\u013a\4\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\12\10\1\u013b\17\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\4\10\1\u013c\25\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\12\10\1\u013d"+
    "\17\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\24\10\1\u013e\5\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\10\10\1\u013f\21\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\6\10\1\u0140\23\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\10\10\1\u0141"+
    "\21\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\17\10\1\u0142\12\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\10\10\1\u0143\21\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\22\10\1\u0144\7\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\11\10\1\u0145"+
    "\20\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\3\10\1\u0146\26\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\4\10\1\u0147\25\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\13\10\1\u0148\16\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\20\10\1\u0149"+
    "\11\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\10\10\1\u014a\21\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\2\10\1\u014b\27\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\4\10\1\u014c\25\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\6\10\1\u014d"+
    "\23\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\15\10\1\u014e\14\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\4\10\1\u014f\25\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\6\10\1\u0150\23\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\4\10\1\u0151"+
    "\25\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\12\10\1\u0152\17\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\6\10\1\u0153\23\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\26\10\1\u0154\3\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\13\10\1\u0155"+
    "\16\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\13\10\1\u0156\16\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\4\10\1\u0157\25\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\4\10\1\u0158\25\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\10\10\1\u0159"+
    "\21\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\13\10\1\u015a\16\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\4\10\1\u015b\25\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\4\10\1\u015c\25\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\17\10\1\u015d"+
    "\12\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\6\10\1\u015e\23\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\11\10\1\u015f\20\10\1\0\1\10\25\0"+
    "\3\10\7\0\3\10\1\0\1\10\1\0\2\10\3\0"+
    "\4\10\1\u0160\25\10\1\0\1\10\25\0\3\10\7\0"+
    "\3\10\1\0\1\10\1\0\2\10\3\0\6\10\1\u0161"+
    "\23\10\1\0\1\10\25\0\3\10\7\0\3\10\1\0"+
    "\1\10\1\0\2\10\3\0\21\10\1\u0162\10\10\1\0"+
    "\1\10\25\0\3\10\7\0\3\10\1\0\1\10\1\0"+
    "\2\10\3\0\31\10\1\u0163\1\0\1\10\25\0\3\10"+
    "\7\0\3\10\1\0\1\10\1\0\2\10\3\0\22\10"+
    "\1\u0164\7\10\1\0\1\10\25\0\3\10\7\0\3\10"+
    "\1\0\1\10\1\0\2\10\3\0\3\10\1\u0165\26\10"+
    "\1\0\1\10\25\0\3\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\3\0\4\10\1\u0166\25\10\1\0\1\10"+
    "\25\0\3\10\7\0\3\10\1\0\1\10\1\0\2\10"+
    "\3\0\21\10\1\u0167\10\10\1\0\1\10\25\0\3\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\10\1\1\11\20\1\10\11\4\1\2\11"+
    "\6\1\2\11\1\1\1\11\1\1\1\11\2\1\1\0"+
    "\2\11\2\1\1\0\1\1\1\0\3\11\1\0\1\11"+
    "\1\1\1\0\47\1\2\11\1\1\1\11\1\1\16\11"+
    "\2\1\5\11\2\0\2\1\1\0\2\11\70\1\1\11"+
    "\1\1\2\11\2\0\5\11\2\0\5\11\54\1\1\11"+
    "\1\0\40\1\1\11\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer strbuf = new StringBuffer(128);
  int sub_line;
  int sub_column;
  int strlit_start_line, strlit_start_column;

  private Symbol sym(short id) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), str());
  }

  private Symbol sym(short id, String value) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), value);
  }

  private Symbol sym(short id, String value, int start_line, int start_column, int len) {
    return new Symbol(id, start_line, start_column, len, value);
  }

  private String str() { return yytext(); }
  private int len() { return yylength(); }

  private void error(String msg) throws Scanner.Exception {
    throw new Scanner.Exception(yyline + 1, yycolumn + 1, msg);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2892) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                /* detect position of first SUB character */
  if (!(sub_line == 0 && sub_column == 0) && (sub_line != yyline || sub_column != yycolumn-1)) {
    /* reset to only return error once */
    sub_line = 0;
    sub_column = 0;
    /* return error */
    error("error");
  }
  return sym(Terminals.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("illegal character \""+str()+ "\"");
            }
          case 133: break;
          case 2: 
            { 
            }
          case 134: break;
          case 3: 
            { return sym(Terminals.DIV);
            }
          case 135: break;
          case 4: 
            { return sym(Terminals.MULT);
            }
          case 136: break;
          case 5: 
            { return sym(Terminals.IDENTIFIER);
            }
          case 137: break;
          case 6: 
            { return sym(Terminals.NUMERIC_LITERAL);
            }
          case 138: break;
          case 7: 
            { return sym(Terminals.DOT);
            }
          case 139: break;
          case 8: 
            { return sym(Terminals.MINUS);
            }
          case 140: break;
          case 9: 
            { yybegin(STRING);
    /* remember start position of string literal so we can */
    /* set its position correctly in the end */
    strlit_start_line = yyline+1;
    strlit_start_column = yycolumn+1;
    strbuf.setLength(0);
            }
          case 141: break;
          case 10: 
            { return sym(Terminals.LPAREN);
            }
          case 142: break;
          case 11: 
            { return sym(Terminals.RPAREN);
            }
          case 143: break;
          case 12: 
            { return sym(Terminals.LBRACE);
            }
          case 144: break;
          case 13: 
            { return sym(Terminals.RBRACE);
            }
          case 145: break;
          case 14: 
            { return sym(Terminals.LBRACK);
            }
          case 146: break;
          case 15: 
            { return sym(Terminals.RBRACK);
            }
          case 147: break;
          case 16: 
            { return sym(Terminals.SEMICOLON);
            }
          case 148: break;
          case 17: 
            { return sym(Terminals.COMMA);
            }
          case 149: break;
          case 18: 
            { return sym(Terminals.EQ);
            }
          case 150: break;
          case 19: 
            { return sym(Terminals.GT);
            }
          case 151: break;
          case 20: 
            { return sym(Terminals.LT);
            }
          case 152: break;
          case 21: 
            { return sym(Terminals.NOT);
            }
          case 153: break;
          case 22: 
            { return sym(Terminals.COMP);
            }
          case 154: break;
          case 23: 
            { return sym(Terminals.QUESTION);
            }
          case 155: break;
          case 24: 
            { return sym(Terminals.COLON);
            }
          case 156: break;
          case 25: 
            { return sym(Terminals.AND);
            }
          case 157: break;
          case 26: 
            { return sym(Terminals.OR);
            }
          case 158: break;
          case 27: 
            { return sym(Terminals.PLUS);
            }
          case 159: break;
          case 28: 
            { return sym(Terminals.XOR);
            }
          case 160: break;
          case 29: 
            { return sym(Terminals.MOD);
            }
          case 161: break;
          case 30: 
            { return sym(Terminals.AT);
            }
          case 162: break;
          case 31: 
            { if(sub_line == 0 && sub_column == 0) {
    sub_line = yyline; sub_column = yycolumn;
  }
            }
          case 163: break;
          case 32: 
            { strbuf.append(str());
            }
          case 164: break;
          case 33: 
            { error("unterminated string at end of line");
            }
          case 165: break;
          case 34: 
            { yybegin(YYINITIAL);
                                   return sym(Terminals.STRING_LITERAL, strbuf.toString(), strlit_start_line, strlit_start_column, strbuf.length()+2);
            }
          case 166: break;
          case 35: 
            { return sym(Terminals.DIVEQ);
            }
          case 167: break;
          case 36: 
            { return sym(Terminals.MULTEQ);
            }
          case 168: break;
          case 37: 
            { return sym(Terminals.MINUSMINUS);
            }
          case 169: break;
          case 38: 
            { return sym(Terminals.MINUSEQ);
            }
          case 170: break;
          case 39: 
            { return sym(Terminals.RARROW);
            }
          case 171: break;
          case 40: 
            { error("unterminated character literal at end of line");
            }
          case 172: break;
          case 41: 
            { return sym(Terminals.IF);
            }
          case 173: break;
          case 42: 
            { return sym(Terminals.DO);
            }
          case 174: break;
          case 43: 
            { return sym(Terminals.EQEQ);
            }
          case 175: break;
          case 44: 
            { return sym(Terminals.GTEQ);
            }
          case 176: break;
          case 45: 
            { return sym(Terminals.RSHIFT);
            }
          case 177: break;
          case 46: 
            { return sym(Terminals.LTEQ);
            }
          case 178: break;
          case 47: 
            { return sym(Terminals.LSHIFT);
            }
          case 179: break;
          case 48: 
            { return sym(Terminals.NOTEQ);
            }
          case 180: break;
          case 49: 
            { return sym(Terminals.DOUBLECOLON);
            }
          case 181: break;
          case 50: 
            { return sym(Terminals.ANDEQ);
            }
          case 182: break;
          case 51: 
            { return sym(Terminals.ANDAND);
            }
          case 183: break;
          case 52: 
            { return sym(Terminals.OREQ);
            }
          case 184: break;
          case 53: 
            { return sym(Terminals.OROR);
            }
          case 185: break;
          case 54: 
            { return sym(Terminals.PLUSEQ);
            }
          case 186: break;
          case 55: 
            { return sym(Terminals.PLUSPLUS);
            }
          case 187: break;
          case 56: 
            { return sym(Terminals.XOREQ);
            }
          case 188: break;
          case 57: 
            { return sym(Terminals.MODEQ);
            }
          case 189: break;
          case 58: 
            { error("illegal escape sequence \""+str()+"\"");
            }
          case 190: break;
          case 59: 
            { strbuf.append( '\'' );
            }
          case 191: break;
          case 60: 
            { strbuf.append( '\"' );
            }
          case 192: break;
          case 61: 
            { strbuf.append( '\\' );
            }
          case 193: break;
          case 62: 
            { strbuf.append((char)Integer.parseInt(str().substring(1),8));
            }
          case 194: break;
          case 63: 
            { strbuf.append( '\r' );
            }
          case 195: break;
          case 64: 
            { strbuf.append( '\t' );
            }
          case 196: break;
          case 65: 
            { strbuf.append( '\b' );
            }
          case 197: break;
          case 66: 
            { strbuf.append( '\n' );
            }
          case 198: break;
          case 67: 
            { strbuf.append( '\f' );
            }
          case 199: break;
          case 68: 
            { return sym(Terminals.ELLIPSIS);
            }
          case 200: break;
          case 69: 
            { return sym(Terminals.CHARACTER_LITERAL, str().substring(1, len()-1));
            }
          case 201: break;
          case 70: 
            { return sym(Terminals.TRY);
            }
          case 202: break;
          case 71: 
            { return sym(Terminals.NEW);
            }
          case 203: break;
          case 72: 
            { return sym(Terminals.INT);
            }
          case 204: break;
          case 73: 
            { return sym(Terminals.FOR);
            }
          case 205: break;
          case 74: 
            { return sym(Terminals.RSHIFTEQ);
            }
          case 206: break;
          case 75: 
            { return sym(Terminals.URSHIFT);
            }
          case 207: break;
          case 76: 
            { return sym(Terminals.LSHIFTEQ);
            }
          case 208: break;
          case 77: 
            { return sym(Terminals.CHARACTER_LITERAL, "\'");
            }
          case 209: break;
          case 78: 
            { return sym(Terminals.CHARACTER_LITERAL, "\"");
            }
          case 210: break;
          case 79: 
            { return sym(Terminals.CHARACTER_LITERAL, "\\");
            }
          case 211: break;
          case 80: 
            { int val = Integer.parseInt(str().substring(2,len()-1),8);
                                   return sym(Terminals.CHARACTER_LITERAL, new Character((char)val).toString());
            }
          case 212: break;
          case 81: 
            { return sym(Terminals.CHARACTER_LITERAL, "\r");
            }
          case 213: break;
          case 82: 
            { return sym(Terminals.CHARACTER_LITERAL, "\t");
            }
          case 214: break;
          case 83: 
            { return sym(Terminals.CHARACTER_LITERAL, "\b");
            }
          case 215: break;
          case 84: 
            { return sym(Terminals.CHARACTER_LITERAL, "\n");
            }
          case 216: break;
          case 85: 
            { return sym(Terminals.CHARACTER_LITERAL, "\f");
            }
          case 217: break;
          case 86: 
            { return sym(Terminals.ELSE);
            }
          case 218: break;
          case 87: 
            { return sym(Terminals.ENUM);
            }
          case 219: break;
          case 88: 
            { return sym(Terminals.BOOLEAN_LITERAL);
            }
          case 220: break;
          case 89: 
            { return sym(Terminals.THIS);
            }
          case 221: break;
          case 90: 
            { return sym(Terminals.BYTE);
            }
          case 222: break;
          case 91: 
            { return sym(Terminals.CASE);
            }
          case 223: break;
          case 92: 
            { return sym(Terminals.CHAR);
            }
          case 224: break;
          case 93: 
            { return sym(Terminals.LONG);
            }
          case 225: break;
          case 94: 
            { return sym(Terminals.NULL_LITERAL);
            }
          case 226: break;
          case 95: 
            { return sym(Terminals.EOF);
            }
          case 227: break;
          case 96: 
            { return sym(Terminals.VOID);
            }
          case 228: break;
          case 97: 
            { return sym(Terminals.URSHIFTEQ);
            }
          case 229: break;
          case 98: 
            { return sym(Terminals.SHORT);
            }
          case 230: break;
          case 99: 
            { return sym(Terminals.SUPER);
            }
          case 231: break;
          case 100: 
            { return sym(Terminals.THROW);
            }
          case 232: break;
          case 101: 
            { return sym(Terminals.BREAK);
            }
          case 233: break;
          case 102: 
            { return sym(Terminals.CATCH);
            }
          case 234: break;
          case 103: 
            { return sym(Terminals.CLASS);
            }
          case 235: break;
          case 104: 
            { return sym(Terminals.FLOAT);
            }
          case 236: break;
          case 105: 
            { return sym(Terminals.FINAL);
            }
          case 237: break;
          case 106: 
            { return sym(Terminals.WHILE);
            }
          case 238: break;
          case 107: 
            { return sym(Terminals.DOCUMENTATION_COMMENT);
            }
          case 239: break;
          case 108: 
            { return sym(Terminals.ASSERT);
            }
          case 240: break;
          case 109: 
            { return sym(Terminals.STATIC);
            }
          case 241: break;
          case 110: 
            { return sym(Terminals.SWITCH);
            }
          case 242: break;
          case 111: 
            { return sym(Terminals.RETURN);
            }
          case 243: break;
          case 112: 
            { return sym(Terminals.THROWS);
            }
          case 244: break;
          case 113: 
            { return sym(Terminals.NATIVE);
            }
          case 245: break;
          case 114: 
            { return sym(Terminals.IMPORT);
            }
          case 246: break;
          case 115: 
            { return sym(Terminals.DOUBLE);
            }
          case 247: break;
          case 116: 
            { return sym(Terminals.PUBLIC);
            }
          case 248: break;
          case 117: 
            { return sym(Terminals.EXTENDS);
            }
          case 249: break;
          case 118: 
            { return sym(Terminals.BOOLEAN);
            }
          case 250: break;
          case 119: 
            { return sym(Terminals.DEFAULT);
            }
          case 251: break;
          case 120: 
            { return sym(Terminals.FINALLY);
            }
          case 252: break;
          case 121: 
            { return sym(Terminals.PACKAGE);
            }
          case 253: break;
          case 122: 
            { return sym(Terminals.PRIVATE);
            }
          case 254: break;
          case 123: 
            { return sym(Terminals.ABSTRACT);
            }
          case 255: break;
          case 124: 
            { return sym(Terminals.STRICTFP);
            }
          case 256: break;
          case 125: 
            { return sym(Terminals.CONTINUE);
            }
          case 257: break;
          case 126: 
            { return sym(Terminals.VOLATILE);
            }
          case 258: break;
          case 127: 
            { return sym(Terminals.TRANSIENT);
            }
          case 259: break;
          case 128: 
            { return sym(Terminals.INTERFACE);
            }
          case 260: break;
          case 129: 
            { return sym(Terminals.PROTECTED);
            }
          case 261: break;
          case 130: 
            { return sym(Terminals.INSTANCEOF);
            }
          case 262: break;
          case 131: 
            { return sym(Terminals.IMPLEMENTS);
            }
          case 263: break;
          case 132: 
            { return sym(Terminals.SYNCHRONIZED);
            }
          case 264: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
